#!/usr/bin/env bash
# shellcheck source-path=..

pinentry_wrapper() {
  set -eo pipefail; shopt -s inherit_errexit
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
  source "$pkgroot/.upkg/records.sh/records.sh"

  DOC="Pinentry Wrapper - Cross-platform pinentry script with a CLI interface
Usage:
  pinentry-wrapper [options] [PROMPT]

Options:
  -d --desc TEXT    Text to appear below the prompt
                    [default: \${PINENTRY_DESC:-}]
  -o --ok TEXT      Text for the OK button
                    [default: \${PINENTRY_OK:-OK}]
  -c --cancel TEXT  Text for the Cancel button
                    [default: \${PINENTRY_CANCEL:-Cancel}]
  -e --error TEXT   Set an error text
                    [default: \${PINENTRY_ERROR:-}]

Note:
  PROMPT can be overriden with \$PINENTRY_PROMPT
  If PROMPT is not defined or overridden, the default is 'Enter your password'
"
# docopt parser below, refresh this parser with `docopt.sh pinentry-wrapper.sh`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { source "$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:648};usage=${DOC:71:44};digest=603ae;options=('-d --desc 1'\
 '-o --ok 1' '-c --cancel 1' '-e --error 1');node_0(){ value __desc 0;}
node_1(){ value __ok 1;};node_2(){ value __cancel 2;};node_3(){ value __error 3
};node_4(){ value PROMPT a;};node_5(){ optional 0 1 2 3;};node_6(){ optional 4;}
node_7(){ sequence 5 6;};cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" \
"$1" >&2;printf "%s\n" "${DOC:71:44}" >&2;exit 1;}';local varnames=(__desc \
__ok __cancel __error PROMPT) varname;for varname in "${varnames[@]}"; do
unset "var_$varname";done;parse 7 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;eval $p'__desc=${var__'\
'_desc:-'"'"'${PINENTRY_DESC:-}'"'"'};'$p'__ok=${var___ok:-'"'"'\
${PINENTRY_OK:-OK}'"'"'};'$p'__cancel=${var___cancel:-'"'"'\
${PINENTRY_CANCEL:-Cancel}'"'"'};'$p'__error=${var___error:-'"'"'\
${PINENTRY_ERROR:-}'"'"'};'$p'PROMPT=${var_PROMPT:-};';local docopt_i=1;[[ \
$BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for \
varname in "${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' pinentry-wrapper.sh`
  eval "$(docopt "$@")"

  local pinentry_cmd pinentry_mac="pinentry-mac" pinentry_win="/mnt/c/Program Files (x86)/Gpg4win/bin/pinentry.exe"
  if type pinentry >/dev/null 2>&1; then
    pinentry_cmd=pinentry
  elif type "$pinentry_win" >/dev/null 2>&1; then
    pinentry_cmd=$pinentry_win
  elif type "$pinentry_mac" >/dev/null 2>&1; then
    pinentry_cmd=$pinentry_mac
  else
    fatal "Missing dependency: Unable to find pinentry command"
  fi
  verbose "pinentry command found: '%s'" "$pinentry_cmd"

  [[ -z $PINENTRY_PROMPT ]] || PROMPT=$PINENTRY_PROMPT
  [[ -n $PROMPT ]] || PROMPT='Enter your password'
  [[ $__desc != "\${PINENTRY_DESC:-}" ]] || __desc=${PINENTRY_DESC:-}
  [[ $__ok != "\${PINENTRY_OK:-OK}" ]] || __ok=${PINENTRY_OK:-OK}
  [[ $__cancel != "\${PINENTRY_CANCEL:-Cancel}" ]] || __cancel=${PINENTRY_CANCEL:-Cancel}
  [[ $__error != "\${PINENTRY_ERROR:-}" ]] || __error=${PINENTRY_ERROR:-}

  local pinentry_script out out_log commands=()
  commands+=("SETPROMPT $(escape "$PROMPT")")
  [[ -z $__desc ]] || commands+=("SETDESC $(escape "$__desc")")
  commands+=("SETOK $__ok")
  commands+=("SETCANCEL $__cancel")
  [[ -z $__error ]] || commands+=("SETERROR $__error")
  commands+=("GETPIN")
  pinentry_script=$(printf "%s\n" "${commands[@]}")
  debug "Final pinentry script:\n%s" "$pinentry_script"

  out=$("$pinentry_cmd" --ttyname "$(tty)" <<<"$pinentry_script" || true)
  # shellcheck disable=SC2001
  out_log=$(sed 's/^D .*/D *REDACTED*/' <<<"$out")
  debug "pinentry response:\n%s" "$out_log"
  if [[ $out = *$'\nOK' ]]; then
    out=${out#$'OK Pleased to meet you\n'}
    out=${out%%$'\nOK'}
    out=${out##*$'OK'}
    printf "%s" "${out##*$'\nD '}"
    return 0
  elif [[ $out = *'ERR 83886179'* ]]; then
    return 2
  else
    fatal "Unknown pinentry response: %s" "$out_log"
  fi
}

escape() {
  local str=$1
  str=${str//%/%25}
  str=${str//$'\n'/%0A}
  printf "%s" "$str"
}

pinentry_wrapper "$@"
